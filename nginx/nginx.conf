worker_processes 1;

events { worker_connections 1024; }

# In a real example you would redirect to https, but this is left like this to keep it simple.
http {

  proxy_cache_path /tmp/my_cache keys_zone=my_cache:10m levels=1:2 inactive=600s max_size=100m;
  proxy_cache_path /tmp/assets_cache keys_zone=assets_cache:10m levels=1:2 inactive=30s max_size=100m;

  proxy_cache_valid 200 302 10m;
  proxy_cache_valid 404      1m;
  # use stale when updating
  proxy_cache_background_update on;
  proxy_cache_methods GET;
  proxy_cache_key $uri;
  proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;

  add_header X-Cache $upstream_cache_status;

  underscores_in_headers on;

  server {
      listen 80 default_server;

      location /cached/ {
        proxy_cache my_cache;
        proxy_cache_key $uri;
        proxy_cache_bypass $http_bypass_cache;
        proxy_pass  http://goapp:8000/;
      }

      location ~* \.(js|css)$ {
        rewrite_by_lua_block {
          local deployment_version = ngx.location.capture("/deployment-info").body
          local asset = ngx.location.capture("/get-asset" .. ngx.var.uri, {
            vars = { version = deployment_version }
          })
          ngx.header["Version"] = deployment_version
          ngx.header["X-Cache"] = asset.header["X-Cache"]
          ngx.say(asset.body)
        }
      }

      location ^~ /get-asset/ {
        internal;

        set_by_lua_block $version {
          return ngx.var.version
        }

        more_set_headers "X-Cache $upstream_cache_status";
        proxy_cache assets_cache;
        proxy_cache_key $uri$version;
        proxy_pass  http://goapp:8000/;
      }

      location / {
        proxy_pass  http://goapp:8000;
      }
  }
}
